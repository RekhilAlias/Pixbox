{"version":3,"sources":["Header.js","requests.js","Nav.js","Video.js","axios.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchScifi","fetchWestern","fetchAnimation","fetchTv","Nav","setSelectedOption","onClick","requests","Video","forwardRef","ref","movie","src","backdrop_path","poster_path","alt","line","element","truncateText","text","overview","title","original_name","instance","axios","create","baseURL","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.83c5a87c.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./Header.css\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\r\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\r\n\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className='header'>\r\n      <div className=\"header_icons\">\r\n        <div className=\"header_icon header_icon--active\">\r\n        <HomeIcon />\r\n        <p>Home</p>\r\n        </div>\r\n        <div className=\"header_icon\">\r\n        <FlashOnIcon />\r\n        <p>Trending</p>\r\n        </div>\r\n        <div className=\"header_icon\">\r\n        <LiveTvIcon />\r\n        <p>Verified</p>\r\n        </div>\r\n        <div className=\"header_icon\">\r\n        <VideoLibraryIcon />\r\n        <p>Collections</p>\r\n          </div>\r\n          <div className=\"header_icon\">\r\n          <SearchIcon />\r\n          <p>Search</p>\r\n            </div> \r\n            <div className=\"header_icon\">\r\n            <PersonOutlineIcon />\r\n            <p>Account</p>\r\n              </div>\r\n        \r\n      </div>\r\n        <h1 className=\"lo\">PIXBOX</h1>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","const API_KEY = \"c64826e39e723ccfa31897e2f0d57dfd\";\r\n\r\nexport default{\r\n     fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n     \r\n     fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n\r\n     fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n\r\n     fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n\r\n     fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n\r\n     fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n\r\n     fetchMystery: `/discover/movie?api_key=${API_KEY}&with_genres=9648`,\r\n\r\n     fetchScifi: `/discover/movie?api_key=${API_KEY}&with_genres=878`,\r\n\r\n     fetchWestern: `/discover/movie?api_key=${API_KEY}&with_genres=37`,\r\n\r\n     fetchAnimation: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\r\n\r\n     fetchTv: `/discover/movie?api_key=${API_KEY}&with_genres=10770`,\r\n\r\n};","import React from 'react'\r\nimport \"./Nav.css\";\r\nimport requests from './requests';\r\nfunction Nav({ setSelectedOption }) {\r\n  return (\r\n    <div className='nav'>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchTrending)}>Trending</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchTopRated)}>Top Rated</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchActionMovies)}>Action</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchHorrorMovies)}>Horror</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchRomanceMovies)}>Romance</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchMystery)}>Mystery</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchScifi)}>Scifi</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchWestern)}>Western</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchAnimation)}>Animation</h2>\r\n      <h2 onClick={() => setSelectedOption(requests.fetchTv)}>TvShows</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Nav\r\n","import React, { forwardRef } from \"react\";\r\nimport './Video.css';\r\nimport TextTruncate from \"react-text-truncate\";\r\n\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\nconst Video = forwardRef(({ movie }, ref) => {\r\n  return (\r\n    <div ref={ref} className='Video'>\r\n      \r\n     \r\n      <img src={`${base_url}${movie.backdrop_path || movie.poster_path}`} alt=\"poster\" />\r\n      \r\n      <TextTruncate\r\n     \r\n       line={1}\r\n       element=\"p\"\r\n       truncateText=\"..\"\r\n       text={movie.overview} />\r\n      \r\n      \r\n  <h2>{movie.title || movie.original_name}</h2>\r\n      <p className=\"video_stats\">\r\n      </p>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Video;\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useEffect, useState } from 'react';\r\nimport \"./Results.css\";\r\nimport Video from \"./Video\";\r\nimport axios from './axios';\r\nimport FlipMove from \"react-flip-move\";\r\n\r\nfunction Results({selectedOption}) {\r\n\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData(){\r\n    const request = await axios.get(selectedOption);\r\n    setMovies(request.data.results);\r\n    return request;\r\n    }\r\n    fetchData();\r\n  }, [selectedOption])\r\n\r\n\r\n  return (\r\n    <div className=\"results\">\r\n      <FlipMove>\r\n      {movies.map(movie => (\r\n         <Video key={movie.id} movie={movie} />\r\n       ))}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from \"./Header\";\nimport Nav from \"./Nav\";\nimport Results from \"./Results\";\nimport requests from \"./requests\";\n\nfunction App() {\n  const [selectedOption, setSelectedOption] = useState(requests.fetchTrending);\n  return (\n    <div className=\"app\">\n     <Header />\n    \n\n    <Nav setSelectedOption={setSelectedOption}/>\n\n\n       <Results selectedOption={selectedOption}/>\n      \n   \n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}